{
  "hash": "882458ca5ead409b41fe122c1bc50453",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spiegelhalter Chapter 1\"\nsubtitle: \"Answer and submit *before* class discussion\"\n---\n\n\n<!-- Load packages, etc. -->\n\n\n\n\n::: {.cell}\n\n:::\n\n\n<!-- Submission link -->\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n::: {.callout-note}\n## Question 1:\n\n\nWhat is binary data?\n\n`<textarea id=\"S01-B1\" name=\"S01-B1\" class=\"devoirs-text\" rows=\"4\" cols=\"50\" placeholder=\"Type here for question ID S01-B1\"></textarea>\n<div style=\"color: grey;\">\n<small>question id: S01-B1</small>\n</div>`{=html}\n\n\n\n:::\n\n::: {.callout-note}\n## Question 2:\n\n\nThere are at least two examples in the chapter of ways to make graphics more informative. What are they?\n\n`<textarea id=\"S01-B2\" name=\"S01-B2\" class=\"devoirs-text\" rows=\"4\" cols=\"50\" placeholder=\"Type here for question ID S01-B2\"></textarea>\n<div style=\"color: grey;\">\n<small>question id: S01-B2</small>\n</div>`{=html}\n\n\n\n:::\n\n<!-- Boilerplate for devoirs functionality -->\n\n<span id=\"devoirs-docID\" style=\"display: none;\">S1-before.rmarkdown</span>\n<button onclick=\"devoirsSubmit()\">Collect your answers</button>\n<div id=\"devoirs_summary\">No answers yet collected</div>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<script type='text/javascript'>\n console.log(\"In devoirs.js\")\n\nfunction devoirsCollectEssays() {\n  var essay_answers = [];\n  var items = document.getElementsByClassName(\"devoirs-text\");\n  for (i = 0; i < items.length; i++) {\n    //console.log(\"text entry\" + i + \"being handled\");\n    essay_answers[i] = {itemid: items[i].id, contents: items[i].value}\n  }\n\n  return essay_answers;\n}\n\nfunction devoirsGetDocID() {\n  return document.getElementById(\"devoirs-docID\").innerHTML\n}\n\nfunction devoirsCollectMC() {\n    let mc_answers = [] // Hold the information\n    var ele = document.getElementsByClassName(\"devoirs-mcq\");\n    var count = 0;\n    for (i = 0; i < ele.length; i++) {\n        if (ele[i].checked) {\n          //console.log(\"Entering conditional.\");\n          let checked_one = ele[i];\n          mc_answers[count++] = {itemid: checked_one.id, w: checked_one.getAttribute(\"w\"), contents: checked_one.text};\n        }\n    }\n    return mc_answers;\n}\n\nconsole.log(\"About to define WebR\")\n\nfunction devoirsCollectWebR() {\n  var chunk_contents = []; // placeholder for collecting webr items\n  if (typeof qwebrCellDetails == \"undefined\") {\n    // There aren't any webr chunks\n    return chunk_contents;\n  }\n  var chunks = qwebrCellDetails;\n  for (i = 0; i < chunks.length; i++) {\n    chunk_contents[i] = {itemid: chunks[i].options[\"label\"], contents: chunks[i].code};\n  }\n\n  return chunk_contents;\n}\n\nconsole.log(\"About to define devoirsSubmit\")\n\nfunction devoirsSubmit() {\n  console.log(\"About to collect history\")\n\n  // check if there is any sign of a webr entry\n  // If not, don't try to collect webr entries\n  if (typeof qwebrRCommandHistory === 'undefined') {\n    items = {docid: devoirsGetDocID(), MC: devoirsCollectMC(), Essays: devoirsCollectEssays(), WebR: {}, R: {}}\n  } else {\n    console.log(\"Getting R commands.\")\n    var Rhistory = qwebrRCommandHistory.map((x) => x.replace(/Ran code in (.*) at (.*[AP]M).{5}(.*)/, \"[chunk: $1, time: $2, code: $3]\"))\n\n    items = {docid: devoirsGetDocID(), MC: devoirsCollectMC(), Essays: devoirsCollectEssays(), WebR: devoirsCollectWebR(), R: Rhistory}\n  }\n\n  navigator.clipboard.writeText(JSON.stringify(items));\n\n  // summarize what's being collected\n  var my_summary = \"Answers copied to clipboard. Fixed choice: \" + items.MC.length + \" Essays: \" + items.Essays.length + \" WebR chunks: \" + items.WebR.length\n\n  document.getElementById(\"devoirs_summary\").innerHTML = my_summary;\n}\n\nconsole.log(\"Read devoirsSubmit()\")\n\n// Hint handling in Multiple choice\n\n// Still have to add an on/off switch from options\n\nfunction devoirs_setup_hintarea() {\n  answers = document.getElementsByClassName(\"devoirs-mcq\")\n  for (i=0; i<answers.length; i++) answers[i].addEventListener('click', function(e){document.getElementById(e.target.name + \"-hintarea\").innerHTML = e.target.getAttribute(\"hint\")})\n}\n\n window.addEventListener(\"load\", function() {\n  answers = document.getElementsByClassName(\"devoirs-mcq\")\n  for (i=0; i<answers.length; i++) {\n    if (answers[i].getAttribute(\"show_hints\") == \"TRUE\") {\n        answers[i].addEventListener('click', function(e){\n        document.getElementById(e.target.name + \"-hintarea\").innerText = e.target.getAttribute(\"hint\")\n      })\n\n    }\n  }\n})\n\nconsole.log(\"Added hint summary.\") \n</script>\n\n```\n\n:::\n:::\n\n\n[Submit collected answers here](https://forms.gle/YPEuzE3oiQQQhrWNA)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}