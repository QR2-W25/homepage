{
  "hash": "bbe942a6dfa6c96386d0f7bd5b869eff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spiegelhalter Chapter 1 Follow-up\"\nsubtitle: \"Follow-up to in-class discussion\"\n---\n\n\n\n\n<!-- Load packages, etc. -->\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n<!-- Submission link -->\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n::::{.callout-warning collapse=true}\n### Remember to hand in your work ...\n::: {.panel-tabset}\n## Submitting answers\n\nAt any point, you can submit your answers by collecting them and uploading them to the class site.\n\n<span id=\"devoirs-docID\" style=\"display: none;\">S1-after.rmarkdown</span>\n<span><button onclick=\"devoirsSubmit()\">Collect your answers</button></span>\n<span id=\"devoirs_summary\">No answers yet collected</span>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<script type='text/javascript'>\n console.log(\"In devoirs.js\")\n\nfunction devoirsCollectEssays() {\n  var essay_answers = [];\n  var items = document.getElementsByClassName(\"devoirs-text\");\n  for (i = 0; i < items.length; i++) {\n    //console.log(\"text entry\" + i + \"being handled\");\n    essay_answers[i] = {itemid: items[i].id, contents: items[i].value}\n  }\n\n  return essay_answers;\n}\n\nfunction devoirsGetDocID() {\n  return document.getElementById(\"devoirs-docID\").innerHTML\n}\n\nfunction devoirsCollectMC() {\n    let mc_answers = [] // Hold the information\n    var ele = document.getElementsByClassName(\"devoirs-mcq\");\n    var count = 0;\n    for (i = 0; i < ele.length; i++) {\n        if (ele[i].checked) {\n          //console.log(\"Entering conditional.\");\n          let checked_one = ele[i];\n          mc_answers[count++] = {itemid: checked_one.id, w: checked_one.getAttribute(\"w\"), contents: checked_one.text};\n        }\n    }\n    return mc_answers;\n}\n\nconsole.log(\"About to define WebR\")\n\nfunction devoirsCollectWebR() {\n  var chunk_contents = []; // placeholder for collecting webr items\n  if (typeof qwebrCellDetails == \"undefined\") {\n    // There aren't any webr chunks\n    return chunk_contents;\n  }\n  var chunks = qwebrCellDetails;\n  for (i = 0; i < chunks.length; i++) {\n    chunk_contents[i] = {itemid: chunks[i].options[\"label\"], contents: chunks[i].code};\n  }\n\n  return chunk_contents;\n}\n\nconsole.log(\"About to define devoirsSubmit\")\n\nfunction devoirsSubmit() {\n  console.log(\"About to collect history\")\n\n  // check if there is any sign of a webr entry\n  // If not, don't try to collect webr entries\n  if (typeof qwebrRCommandHistory === 'undefined') {\n    items = {docid: devoirsGetDocID(), MC: devoirsCollectMC(), Essays: devoirsCollectEssays(), WebR: {}, R: {}}\n  } else {\n    console.log(\"Getting R commands.\")\n    var Rhistory = qwebrRCommandHistory.map((x) => x.replace(/Ran code in (.*) at (.*[AP]M).{5}(.*)/, \"[chunk: $1, time: $2, code: $3]\"))\n\n    items = {docid: devoirsGetDocID(), MC: devoirsCollectMC(), Essays: devoirsCollectEssays()} //, WebR: devoirsCollectWebR(), R: Rhistory}\n  }\n\n  navigator.clipboard.writeText(JSON.stringify(items));\n\n  // summarize what's being collected\n  var my_summary = \"Answers copied to clipboard. Fixed choice: \" + items.MC.length + \" Essays: \" + items.Essays.length + \" WebR chunks: \" + items.WebR.length\n\n  document.getElementById(\"devoirs_summary\").innerHTML = my_summary;\n}\n\nconsole.log(\"Read devoirsSubmit()\")\n\n// Hint handling in Multiple choice\n\n// Still have to add an on/off switch from options\n\nfunction devoirs_setup_hintarea() {\n  answers = document.getElementsByClassName(\"devoirs-mcq\")\n  for (i=0; i<answers.length; i++) answers[i].addEventListener('click', function(e){document.getElementById(e.target.name + \"-hintarea\").innerHTML = e.target.getAttribute(\"hint\")})\n}\n\n window.addEventListener(\"load\", function() {\n  answers = document.getElementsByClassName(\"devoirs-mcq\")\n  for (i=0; i<answers.length; i++) {\n    if (answers[i].getAttribute(\"show_hints\") == \"TRUE\") {\n        answers[i].addEventListener('click', function(e){\n        document.getElementById(e.target.name + \"-hintarea\").innerText = e.target.getAttribute(\"hint\")\n      })\n\n    }\n  }\n})\n\nconsole.log(\"Added hint summary.\") \n</script>\n\n```\n\n:::\n:::\n\n\n\n\n[Link to upload site]({{< var devoirs.uploadsite >}}){target=\"_blank\"}\n\n## Clearing document memory\nIf the answers that have been loaded automatically are not yours, press this button before starting your work:\n<script type=\"text/javascript\">\n      // clear the local storage\n    document.addEventListener('DOMContentLoaded', function() {\n      const form = document.getElementById('btnClearStorage');\n      form.addEventListener(\"click\", function () {\n        localStorage.clear();\n        location.reload();\n        console.log(\"Clearing memory\");\n      }, false);\n    }\n    )\n    </script>\n<button id=\"btnClearStorage\">Clear memory</button>\n:::\n\n::::\n\n\n\n\n\nJust some filler.\n\n<script type=\"text/javascript\">\n      //save entered info\n      document.addEventListener('DOMContentLoaded', function() {\n      console.log('Adding event listener for dove-sees-smoke.');\n      const form = document.getElementById('dove-sees-smoke');\n      form.addEventListener(\"input\", function () {\n        var todo = document.getElementById('dove-sees-smoke').value;\n        localStorage.setItem(\"dove-sees-smoke-contents\", todo);\n        console.log(\"Saving value of dove-sees-smoke.\")\n      }, false);\n\n      //on page load, read in the old value\n      const savedValue = localStorage.getItem(\"dove-sees-smoke-contents\");\n      if (savedValue) {\n        document.getElementById('dove-sees-smoke').value = savedValue;\n      }\n})\n</script>\n<textarea id=\"dove-sees-smoke\" name=\"dove-sees-smoke\" class=\"devoirs-text\" style=\"font-family: monospace, monospace;\" rows=\"4\" cols=\"50\" placeholder=\"Type here. (ID dove-sees-smoke)\"></textarea>\n\n",
    "supporting": [
      "S1-after_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}